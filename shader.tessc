#version 440 core

layout (vertices = 4) out;

patch out highp vec3 normal;
patch out vec2 tc[4];

uniform mat4 modelToWorld;
uniform mat4 worldToCamera;
uniform mat4 cameraToView;
uniform int partFreq;

float lenght(vec2 a)
{
    float temp = a.x * a.x + a.y * a.y;
    return sqrt(temp);
}

void main(void)
{
    int side = gl_PrimitiveID / 100;
    int id = gl_PrimitiveID - 100 * side;
    int y = int(mod(id, 10));
    int x = id / 10;
    tc[3] = vec2(0.1 + x * 0.1, 0.1 + y * 0.1);
    tc[2] = vec2(x * 0.1, 0.1 + y * 0.1);
    tc[1] = vec2(0.1 + x * 0.1, y * 0.1);
    tc[0] = vec2(x * 0.1, y * 0.1);

    vec3 e1 = gl_in[1].gl_Position.xyz - gl_in[0].gl_Position.xyz;
    vec3 e2 = gl_in[2].gl_Position.xyz - gl_in[1].gl_Position.xyz;
    if(gl_InvocationID == 0)
    {
        gl_TessLevelOuter[0] = partFreq;
        gl_TessLevelOuter[1] = partFreq;
        gl_TessLevelOuter[2] = partFreq;
        gl_TessLevelOuter[3] = partFreq;
        gl_TessLevelInner[0] = partFreq;
        gl_TessLevelInner[1] = partFreq;
    }
    gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
    normal = cross(e1, e2);
}















