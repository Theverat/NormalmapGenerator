#version 440 core

layout (quads , equal_spacing, ccw) in;

patch in highp vec3 normal;
patch in vec2 tc[4];

out TSE_OUT
{
    vec2 tc;
} tseOut;

uniform sampler2D displacementMap;
uniform float depth;

bool lowerToEdge(vec2 a)
{
    if(abs(a.x) < 0.005)
        return true;
    if(abs(a.y) < 0.005)
        return true;
    if(abs(a.x - 1.0) < 0.005)
        return true;
    if(abs(a.y - 1.0) < 0.005)
        return true;
}

void main(void)
{
    // interpolate texture coordinates
    vec2 tc1 = mix(tc[0], tc[1], gl_TessCoord.x);
    vec2 tc2 = mix(tc[2], tc[3], gl_TessCoord.x);
    tseOut.tc = mix(tc2, tc1, gl_TessCoord.y);

    // interpolate vertex coordinates
    vec4 p1 = mix(gl_in[0].gl_Position, gl_in[1].gl_Position, gl_TessCoord.x);
    vec4 p2 = mix(gl_in[2].gl_Position, gl_in[3].gl_Position, gl_TessCoord.x);
    vec4 p = mix(p2, p1, gl_TessCoord.y);

    // find height and set it to zero if we are too close to the edge
    float height = texture(displacementMap, tseOut.tc).r;
    height = (height * 2) - 1;
    if(lowerToEdge(tseOut.tc))
        height = 0;

    // applay new height
    p += vec4(normal, 0.0) * height * depth;
    gl_Position = p;
}
